abstract_declarator 
		: pointer
		| pointer direct_abstract_declarator
		| direct_abstract_declarator
		;
additive_expr 
		: multiplicative_expr
		| additive_expr add_op multiplicative_expr 
		;
add_op 
		: PLUS
		| MINUS 
		;
address_expr 
		: AMPERSAND cast_expr 
		;
array_declarator 
		: direct_declarator LEFT_SQUARE constant_expr RIGHT_SQUARE 
		| direct_declarator LEFT_SQUARE  RIGHT_SQUARE 
		;
assignment_expr 
		: conditional_expr
		| unary_expr assignment_op assignment_expr 
		;
assignment_op 
		: EQUAL
		| PLUS_EQUAL
		| MINUS_EQUAL
		| ASTERISK_EQUAL
		| SLASH_EQUAL
		| PERCENT_EQUAL 
		| LESS_LESS_EQUAL
		| GREATER_GREATER_EQUAL
		| AMPERSAND_EQUAL
		| CARET_EQUAL
		| VBAR_EQUAL 
		;
bitwise_and_expr 
		: equality_expr
		| bitwise_and_expr AMPERSAND equality_expr 
		;
bitwise_negation_expr 
		: TILDE cast_expr 
		;
bitwise_or_expr 
		: bitwise_xor_expr
		| bitwise_or_expr VBAR bitwise_xor_expr 
		;
bitwise_xor_expr 
		: bitwise_and_expr
		| bitwise_xor_expr CARET bitwise_and_expr 
		;
break_statement 
		: BREAK SEMICOLON 
		;
cast_expr 
		: unary_expr
		| LEFT_PAREN type_name RIGHT_PAREN cast_expr 
		;
character_type_specifier 
		: CHAR
		| SIGNED CHAR
		| UNSIGNED CHAR 
		;
comma_expr 
		: assignment_expr
		| comma_expr COMMA assignment_expr 
		;
compound_statement 
		: LEFT_CURLY declaration_or_statement_list RIGHT_CURLY 
		| LEFT_CURLY  RIGHT_CURLY 
		;
conditional_expr 
		: logical_or_expr
		| logical_or_expr QUESTION expr COLON conditional_expr 
		;
conditional_statement 
		: if_statement
		| if_else_statement 
		;
constant 
		: integer_constant
		| character_constant
		| string_constant 
		;
integer_constant
		: NUMBER
		;
string_constant
		: STRING_CONSTANT
		; 
character_constant
		: CHAR_CONSTANT
		;
constant_expr 
		: conditional_expr 
		;
continue_statement 
		: CONTINUE SEMICOLON 
		;
decl 
		: declaration_specifiers initialized_declarator_list SEMICOLON 
		;
declaration_or_statement 
		: decl
		| statement 
		;
declaration_or_statement_list 
		: declaration_or_statement
		| declaration_or_statement_list declaration_or_statement 
		;
declaration_specifiers 
		: type_specifier 
		;
declarator 
		: pointer_declarator
		| direct_declarator 
		;
direct_abstract_declarator 
		: LEFT_PAREN abstract_declarator RIGHT_PAREN 
		| direct_abstract_declarator LEFT_SQUARE constant_expr RIGHT_SQUARE 
		| direct_abstract_declarator LEFT_SQUARE  RIGHT_SQUARE 
		| LEFT_SQUARE constant_expr RIGHT_SQUARE 
		| LEFT_SQUARE  RIGHT_SQUARE 
		;
direct_declarator 
		: simple_declarator
		| LEFT_PAREN declarator RIGHT_PAREN
		| function_declarator
		| array_declarator 
		;
do_statement 
		: DO statement WHILE LEFT_PAREN expr RIGHT_PAREN SEMICOLON 
		;
equality_expr 
		: relational_expr
		| equality_expr equality_op relational_expr 
		;
equality_op 
		: EQUAL_EQUAL
		| EXCLAMATION_EQUAL
		;
expr 
		: comma_expr 
		;
expression_list 
		: assignment_expr
		| expression_list COMMA assignment_expr 
		;
expression_statement 
		: expr SEMICOLON 
		;
for_expr 
		: LEFT_PAREN initial_clause SEMICOLON expr SEMICOLON expr RIGHT_PAREN 
		| LEFT_PAREN initial_clause SEMICOLON expr SEMICOLON  RIGHT_PAREN 
		| LEFT_PAREN initial_clause SEMICOLON  SEMICOLON expr RIGHT_PAREN 
		| LEFT_PAREN initial_clause SEMICOLON  SEMICOLON  RIGHT_PAREN 
		| LEFT_PAREN  SEMICOLON expr SEMICOLON expr RIGHT_PAREN 
		| LEFT_PAREN  SEMICOLON expr SEMICOLON  RIGHT_PAREN 
		| LEFT_PAREN  SEMICOLON  SEMICOLON expr RIGHT_PAREN 
		| LEFT_PAREN  SEMICOLON  SEMICOLON  RIGHT_PAREN 
		;
for_statement 
		: FOR for_expr statement 
		;
function_call 
		: postfix_expr LEFT_PAREN expression_list RIGHT_PAREN 
		| postfix_expr LEFT_PAREN  RIGHT_PAREN 
		;
function_declarator 
		: direct_declarator LEFT_PAREN parameter_type_list RIGHT_PAREN 
		;
function_definition 
		: function_def_specifier compound_statement 
		;
function_def_specifier 
		: declaration_specifiers declarator
		|  declarator
		;
goto_statement 
		: GOTO named_label SEMICOLON 
		;
if_else_statement 
		: IF LEFT_PAREN expr RIGHT_PAREN statement ELSE statement 
		;
if_statement 
		: IF LEFT_PAREN expr RIGHT_PAREN statement 
		;
indirection_expr 
		: ASTERISK cast_expr
		;
initial_clause 
		: expr 
		;
initialized_declarator 
		: declarator 
		;
initialized_declarator_list 
		: initialized_declarator
		| initialized_declarator_list COMMA initialized_declarator 
		;
integer_type_specifier 
		: signed_type_specifier
		| unsigned_type_specifier
		| character_type_specifier 
		;
iterative_statement 
		: while_statement
		| do_statement
		| for_statement 
		;
label 
		: named_label 
		;
labeled_statement 
		: label COLON statement 
		;
logical_and_expr 
		: bitwise_or_expr
		| logical_and_expr AMPERSAND_AMPERSAND bitwise_or_expr 
		;
logical_negation_expr 
		: EXCLAMATION cast_expr 
		;
logical_or_expr 
		: logical_and_expr
		| logical_or_expr VBAR_VBAR logical_and_expr 
		;
multiplicative_expr 
		: cast_expr
		| multiplicative_expr mult_op cast_expr 
		;
mult_op 
		: ASTERISK
		| SLASH
		| PERCENT 
		;
named_label 
		: IDENTIFIER 
		;
null_statement 
		: SEMICOLON 
		;
parameter_decl 
		: declaration_specifiers declarator
		| declaration_specifiers abstract_declarator
		| declaration_specifiers  
		;
parameter_list 
		: parameter_decl
		| parameter_list COMMA parameter_decl 
		;
parameter_type_list 
		: parameter_list 
		;
parenthesized_expr 
		: LEFT_PAREN expr RIGHT_PAREN 
		;
pointer 
		: ASTERISK
		| ASTERISK pointer 
		;
pointer_declarator 
		: pointer direct_declarator 
		;
postdecrement_expr 
		: postfix_expr MINUS_MINUS 
		;
postfix_expr 
		: primary_expr
		| subscript_expr
		| function_call
		| postincrement_expr
		| postdecrement_expr 
		;
postincrement_expr 
		: postfix_expr PLUS_PLUS 
		;
predecrement_expr 
		: MINUS_MINUS unary_expr 
		;
preincrement_expr 
		: PLUS_PLUS unary_expr 
		;
primary_expr 
		: IDENTIFIER
		| constant
		| parenthesized_expr 
		;
relational_expr 
		: shift_expr
		| relational_expr relational_op shift_expr 
		;
relational_op 
		: LESS
		| LESS_EQUAL
		| GREATER
		| GREATER_EQUAL 
		;
return_statement 
		: RETURN expr SEMICOLON 
		| RETURN  SEMICOLON 
		;
shift_expr 
		: additive_expr
		| shift_expr shift_op additive_expr 
		;
shift_op 
		: LESS_LESS
		| GREATER_GREATER 
		;
signed_type_specifier 
		: SHORT
		| SHORT INT
		| SIGNED SHORT
		| SIGNED SHORT INT
		| INT
		| SIGNED INT
		| SIGNED
		| LONG
		| LONG INT
		| SIGNED LONG
		| SIGNED LONG INT 
		;
simple_declarator 
		: IDENTIFIER 
		;
statement 
		: expression_statement
		| labeled_statement
		| compound_statement
		| conditional_statement
		| iterative_statement
		| break_statement
		| continue_statement
		| return_statement
		| goto_statement
		| null_statement 
		;
subscript_expr 
		: postfix_expr LEFT_SQUARE expr RIGHT_SQUARE 
		;
top_level_decl 
		: decl
		| function_definition 
		;
translation_unit 
		: top_level_decl
		| translation_unit top_level_decl 
		;
type_name 
		: declaration_specifiers abstract_declarator 
		| declaration_specifiers  
		;
type_specifier 
		: integer_type_specifier
		| void_type_specifier 
		;
unary_expr 
		: postfix_expr
		| unary_minus_expr
		| unary_plus_expr
		| logical_negation_expr
		| bitwise_negation_expr
		| address_expr
		| indirection_expr
		| preincrement_expr
		| predecrement_expr 
		;
unary_minus_expr 
		: MINUS cast_expr 
		;
unary_plus_expr 
		: PLUS cast_expr 
		;
unsigned_type_specifier 
		: UNSIGNED SHORT INT 
		| UNSIGNED SHORT
		| UNSIGNED INT
		| UNSIGNED
		| UNSIGNED LONG INT 
		| UNSIGNED LONG  
		;
void_type_specifier 
		: VOID 
		;
while_statement 
		: WHILE LEFT_PAREN expr RIGHT_PAREN statement 
		;
