digraph G { 
abstract_declarator -> "pointer";
abstract_declarator -> "pointer direct_abstract_declarator";
abstract_declarator -> "direct_abstract_declarator";
additive_expr -> "multiplicative_expr";
additive_expr -> "additive_expr add_op multiplicative_expr";
add_op -> "PLUS";
add_op -> "MINUS";
address_expr -> "AMPERSAND cast_expr";
array_declarator -> "direct_declarator LEFT_SQUARE constant_expr RIGHT_SQUARE";
array_declarator -> "direct_declarator LEFT_SQUARE  RIGHT_SQUARE";
assignment_expr -> "conditional_expr";
assignment_expr -> "unary_expr assignment_op assignment_expr";
assignment_op -> "EQUAL";
assignment_op -> "PLUS_EQUAL";
assignment_op -> "MINUS_EQUAL";
assignment_op -> "ASTERISK_EQUAL";
assignment_op -> "SLASH_EQUAL";
assignment_op -> "PERCENT_EQUAL";
assignment_op -> "LESS_LESS_EQUAL";
assignment_op -> "GREATER_GREATER_EQUAL";
assignment_op -> "AMPERSAND_EQUAL";
assignment_op -> "CARET_EQUAL";
assignment_op -> "VBAR_EQUAL";
bitwise_and_expr -> "equality_expr";
bitwise_and_expr -> "bitwise_and_expr AMPERSAND equality_expr";
bitwise_negation_expr -> "TILDE cast_expr";
bitwise_or_expr -> "bitwise_xor_expr";
bitwise_or_expr -> "bitwise_or_expr VBAR bitwise_xor_expr";
bitwise_xor_expr -> "bitwise_and_expr";
bitwise_xor_expr -> "bitwise_xor_expr CARET bitwise_and_expr";
break_statement -> "BREAK SEMICOLON";
cast_expr -> "unary_expr";
cast_expr -> "LEFT_PAREN type_name RIGHT_PAREN cast_expr";
character_type_specifier -> "CHAR";
character_type_specifier -> "SIGNED CHAR";
character_type_specifier -> "UNSIGNED CHAR";
comma_expr -> "assignment_expr";
comma_expr -> "comma_expr COMMA assignment_expr";
compound_statement -> "LEFT_CURLY declaration_or_statement_list RIGHT_CURLY";
compound_statement -> "LEFT_CURLY  RIGHT_CURLY";
conditional_expr -> "logical_or_expr";
conditional_expr -> "logical_or_expr QUESTION expr COLON conditional_expr";
conditional_statement -> "if_statement";
conditional_statement -> "if_else_statement";
constant -> "integer_constant";
constant -> "character_constant";
constant -> "string_constant";
integer_constant -> "NUMBER";
string_constant -> "STRING_CONSTANT";
character_constant -> "CHAR_CONSTANT";
constant_expr -> "conditional_expr";
continue_statement -> "CONTINUE SEMICOLON";
decl -> "declaration_specifiers initialized_declarator_list SEMICOLON";
declaration_or_statement -> "decl";
declaration_or_statement -> "statement";
declaration_or_statement_list -> "declaration_or_statement";
declaration_or_statement_list -> "declaration_or_statement_list declaration_or_statement";
declaration_specifiers -> "type_specifier";
declarator -> "pointer_declarator";
declarator -> "direct_declarator";
direct_abstract_declarator -> "LEFT_PAREN abstract_declarator RIGHT_PAREN";
direct_abstract_declarator -> "direct_abstract_declarator LEFT_SQUARE constant_expr RIGHT_SQUARE";
direct_abstract_declarator -> "direct_abstract_declarator LEFT_SQUARE  RIGHT_SQUARE";
direct_abstract_declarator -> "LEFT_SQUARE constant_expr RIGHT_SQUARE";
direct_abstract_declarator -> "LEFT_SQUARE  RIGHT_SQUARE";
direct_declarator -> "simple_declarator";
direct_declarator -> "LEFT_PAREN declarator RIGHT_PAREN";
direct_declarator -> "function_declarator";
direct_declarator -> "array_declarator";
do_statement -> "DO statement WHILE LEFT_PAREN expr RIGHT_PAREN SEMICOLON";
equality_expr -> "relational_expr";
equality_expr -> "equality_expr equality_op relational_expr";
equality_op -> "EQUAL_EQUAL";
equality_op -> "EXCLAMATION_EQUAL";
expr -> "comma_expr";
expression_list -> "assignment_expr";
expression_list -> "expression_list COMMA assignment_expr";
expression_statement -> "expr SEMICOLON";
for_expr -> "LEFT_PAREN initial_clause SEMICOLON expr SEMICOLON expr RIGHT_PAREN";
for_expr -> "LEFT_PAREN initial_clause SEMICOLON expr SEMICOLON  RIGHT_PAREN";
for_expr -> "LEFT_PAREN initial_clause SEMICOLON  SEMICOLON expr RIGHT_PAREN";
for_expr -> "LEFT_PAREN initial_clause SEMICOLON  SEMICOLON  RIGHT_PAREN";
for_expr -> "LEFT_PAREN  SEMICOLON expr SEMICOLON expr RIGHT_PAREN";
for_expr -> "LEFT_PAREN  SEMICOLON expr SEMICOLON  RIGHT_PAREN";
for_expr -> "LEFT_PAREN  SEMICOLON  SEMICOLON expr RIGHT_PAREN";
for_expr -> "LEFT_PAREN  SEMICOLON  SEMICOLON  RIGHT_PAREN";
for_statement -> "FOR for_expr statement";
function_call -> "postfix_expr LEFT_PAREN expression_list RIGHT_PAREN";
function_call -> "postfix_expr LEFT_PAREN  RIGHT_PAREN";
function_declarator -> "direct_declarator LEFT_PAREN parameter_type_list RIGHT_PAREN";
function_definition -> "function_def_specifier compound_statement";
function_def_specifier -> "declaration_specifiers declarator";
function_def_specifier -> "declarator";
goto_statement -> "GOTO named_label SEMICOLON";
if_else_statement -> "IF LEFT_PAREN expr RIGHT_PAREN statement ELSE statement";
if_statement -> "IF LEFT_PAREN expr RIGHT_PAREN statement";
indirection_expr -> "ASTERISK cast_expr";
initial_clause -> "expr";
initialized_declarator -> "declarator";
initialized_declarator_list -> "initialized_declarator";
initialized_declarator_list -> "initialized_declarator_list COMMA initialized_declarator";
integer_type_specifier -> "signed_type_specifier";
integer_type_specifier -> "unsigned_type_specifier";
integer_type_specifier -> "character_type_specifier";
iterative_statement -> "while_statement";
iterative_statement -> "do_statement";
iterative_statement -> "for_statement";
label -> "named_label";
labeled_statement -> "label COLON statement";
logical_and_expr -> "bitwise_or_expr";
logical_and_expr -> "logical_and_expr AMPERSAND_AMPERSAND bitwise_or_expr";
logical_negation_expr -> "EXCLAMATION cast_expr";
logical_or_expr -> "logical_and_expr";
logical_or_expr -> "logical_or_expr VBAR_VBAR logical_and_expr";
multiplicative_expr -> "cast_expr";
multiplicative_expr -> "multiplicative_expr mult_op cast_expr";
mult_op -> "ASTERISK";
mult_op -> "SLASH";
mult_op -> "PERCENT";
named_label -> "IDENTIFIER";
null_statement -> "SEMICOLON";
parameter_decl -> "declaration_specifiers declarator";
parameter_decl -> "declaration_specifiers abstract_declarator";
parameter_decl -> "declaration_specifiers";
parameter_list -> "parameter_decl";
parameter_list -> "parameter_list COMMA parameter_decl";
parameter_type_list -> "parameter_list";
parenthesized_expr -> "LEFT_PAREN expr RIGHT_PAREN";
pointer -> "ASTERISK";
pointer -> "ASTERISK pointer";
pointer_declarator -> "pointer direct_declarator";
postdecrement_expr -> "postfix_expr MINUS_MINUS";
postfix_expr -> "primary_expr";
postfix_expr -> "subscript_expr";
postfix_expr -> "function_call";
postfix_expr -> "postincrement_expr";
postfix_expr -> "postdecrement_expr";
postincrement_expr -> "postfix_expr PLUS_PLUS";
predecrement_expr -> "MINUS_MINUS unary_expr";
preincrement_expr -> "PLUS_PLUS unary_expr";
primary_expr -> "IDENTIFIER";
primary_expr -> "constant";
primary_expr -> "parenthesized_expr";
relational_expr -> "shift_expr";
relational_expr -> "relational_expr relational_op shift_expr";
relational_op -> "LESS";
relational_op -> "LESS_EQUAL";
relational_op -> "GREATER";
relational_op -> "GREATER_EQUAL";
return_statement -> "RETURN expr SEMICOLON";
return_statement -> "RETURN  SEMICOLON";
shift_expr -> "additive_expr";
shift_expr -> "shift_expr shift_op additive_expr";
shift_op -> "LESS_LESS";
shift_op -> "GREATER_GREATER";
signed_type_specifier -> "SHORT";
signed_type_specifier -> "SHORT INT";
signed_type_specifier -> "SIGNED SHORT";
signed_type_specifier -> "SIGNED SHORT INT";
signed_type_specifier -> "INT";
signed_type_specifier -> "SIGNED INT";
signed_type_specifier -> "SIGNED";
signed_type_specifier -> "LONG";
signed_type_specifier -> "LONG INT";
signed_type_specifier -> "SIGNED LONG";
signed_type_specifier -> "SIGNED LONG INT";
simple_declarator -> "IDENTIFIER";
statement -> "expression_statement";
statement -> "labeled_statement";
statement -> "compound_statement";
statement -> "conditional_statement";
statement -> "iterative_statement";
statement -> "break_statement";
statement -> "continue_statement";
statement -> "return_statement";
statement -> "goto_statement";
statement -> "null_statement";
subscript_expr -> "postfix_expr LEFT_SQUARE expr RIGHT_SQUARE";
top_level_decl -> "decl";
top_level_decl -> "function_definition";
translation_unit -> "top_level_decl";
translation_unit -> "translation_unit top_level_decl";
type_name -> "declaration_specifiers abstract_declarator";
type_name -> "declaration_specifiers";
type_specifier -> "integer_type_specifier";
type_specifier -> "void_type_specifier";
unary_expr -> "postfix_expr";
unary_expr -> "unary_minus_expr";
unary_expr -> "unary_plus_expr";
unary_expr -> "logical_negation_expr";
unary_expr -> "bitwise_negation_expr";
unary_expr -> "address_expr";
unary_expr -> "indirection_expr";
unary_expr -> "preincrement_expr";
unary_expr -> "predecrement_expr";
unary_minus_expr -> "MINUS cast_expr";
unary_plus_expr -> "PLUS cast_expr";
unsigned_type_specifier -> "UNSIGNED SHORT INT";
unsigned_type_specifier -> "UNSIGNED SHORT";
unsigned_type_specifier -> "UNSIGNED INT";
unsigned_type_specifier -> "UNSIGNED";
unsigned_type_specifier -> "UNSIGNED LONG INT";
unsigned_type_specifier -> "UNSIGNED LONG";
void_type_specifier -> "VOID";
while_statement -> "WHILE LEFT_PAREN expr RIGHT_PAREN statement";
}
